<haxe><class file="src/minject/InjectionConfig.hx" path="minject.InjectionConfig" params="">
		<setInjector line="84" public="1" set="method"><f a="injector">
	<c path="minject.Injector"/>
	<e path="Void"/>
</f></setInjector>
		<setResult line="70" public="1" set="method"><f a="result">
	<c path="minject.result.InjectionResult"/>
	<e path="Void"/>
</f></setResult>
		<hasOwnResponse line="65" public="1" set="method"><f a=""><e path="Bool"/></f></hasOwnResponse>
		<hasResponse line="60" public="1" set="method"><f a="injector">
	<c path="minject.Injector"/>
	<e path="Bool"/>
</f></hasResponse>
		<getResponse line="41" public="1" set="method"><f a="injector">
	<c path="minject.Injector"/>
	<d/>
</f></getResponse>
		<result><c path="minject.result.InjectionResult"/></result>
		<injector><c path="minject.Injector"/></injector>
		<injectionName public="1"><c path="String"/></injectionName>
		<request public="1"><c path="Class"><d/></c></request>
		<new line="35" public="1" set="method"><f a="request:injectionName">
	<c path="Class"><d/></c>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class><class file="src/minject/Injector.hx" path="minject.Injector" params="">
		<getFields line="470" set="method"><f a="type">
	<c path="Class"><d/></c>
	<a/>
</f></getFields>
		<getClassName line="464" set="method"><f a="forClass">
	<c path="Class"><d/></c>
	<c path="String"/>
</f></getClassName>
		<set_parentInjector line="445" set="method"><f a="value">
	<c path="minject.Injector"/>
	<c path="minject.Injector"/>
</f></set_parentInjector>
		<getConfigurationForRequest line="428" set="method"><f a="forClass:named:?traverseAncestors">
	<c path="Class"><d/></c>
	<c path="String"/>
	<e path="Bool"/>
	<c path="minject.InjectionConfig"/>
</f></getConfigurationForRequest>
		<getInjectionPoints line="357" set="method"><f a="forClass">
	<c path="Class"><d/></c>
	<c path="minject.InjecteeDescription"/>
</f></getInjectionPoints>
		<getAncestorMapping line="336" public="1" set="method">
			<f a="forClass:?named">
				<c path="Class"><d/></c>
				<c path="String"/>
				<c path="minject.InjectionConfig"/>
			</f>
			<haxe_doc>Searches for an injection mapping in the ancestry of the injector. This 
	method is called when a dependency cannot be satisfied by this injector.</haxe_doc>
		</getAncestorMapping>
		<createChildInjector line="325" public="1" set="method">
			<f a=""><c path="minject.Injector"/></f>
			<haxe_doc>Create an injector that inherits rules from its parent
	
	@returns The injector</haxe_doc>
		</createChildInjector>
		<getInstance line="308" public="1" params="T" set="method">
			<f a="ofClass:?named">
				<c path="Class"><c path="getInstance.T"/></c>
				<c path="String"/>
				<c path="getInstance.T"/>
			</f>
			<haxe_doc>Create or retrieve an instance of the given class
	
	@param ofClass The class to retrieve.
	@param named An optional name (id)
	@return An instance</haxe_doc>
		</getInstance>
		<hasMapping line="289" public="1" set="method">
			<f a="forClass:?named">
				<c path="Class"><d/></c>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Does a rule exist to satsify such a request?

	@param clazz A class or interface
	@param named An optional name (id)
	@returns Whether such a mapping exists</haxe_doc>
		</hasMapping>
		<unmap line="270" public="1" set="method">
			<f a="theClass:?named">
				<c path="Class"><d/></c>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Remove a rule from the injector

	@param theClass A class or interface
	@param named An optional name (id)</haxe_doc>
		</unmap>
		<instantiate line="244" public="1" params="T" set="method">
			<f a="theClass">
				<c path="Class"><c path="instantiate.T"/></c>
				<c path="instantiate.T"/>
			</f>
			<haxe_doc><![CDATA[Create an object of the given class, supplying its dependencies as 
	constructor parameters if the used DI solution has support for 
	constructor injection
	
	<p>Adapters for DI solutions that don't support constructor 
	injection should just create a new instance and perform setter 
	and/or method injection on that.</p>
	
	<p>NOTE: This method will always create a new instance. If you need 
	to retrieve an instance consider using <code>getInstance</code></p>
	
	<p>The <code>Injector</code> should throw an <code>Error</code> if 
	it can't satisfy all dependencies of the injectee.</p>
	
	@param theClass The class to instantiate
	@returns The created instance]]></haxe_doc>
		</instantiate>
		<injectInto line="191" public="1" set="method">
			<f a="target">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[Perform an injection into an object, satisfying all it's dependencies
	
	<p>The <code>Injector</code> should throw an <code>Error</code> if 
	it can't satisfy all dependencies of the injectee.</p>
	
	@param target The object to inject into - the Injectee]]></haxe_doc>
		</injectInto>
		<getMapping line="169" public="1" set="method">
			<f a="forClass:?named">
				<c path="Class"><d/></c>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc></haxe_doc>
		</getMapping>
		<mapRule line="160" public="1" set="method">
			<f a="whenAskedFor:useRule:?named">
				<c path="Class"><d/></c>
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[When asked for an instance of the class <code>whenAskedFor</code>
	use rule <code>useRule</code> to determine the correct injection.
	
	<p>This will use whatever injection is set by the given injection 
	rule as created using one of the other mapping methods.</p>
	
	@param whenAskedFor A class or interface
	@param useRule The rule to use for the injection
	@param named An optional name (id)
	
	@returns A reference to the rule for this injection. To be used with 
	<code>mapRule</code>]]></haxe_doc>
		</mapRule>
		<mapSingletonOf line="139" public="1" set="method">
			<f a="whenAskedFor:useSingletonOf:?named">
				<c path="Class"><d/></c>
				<c path="Class"><d/></c>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[When asked for an instance of the class <code>whenAskedFor</code>
	inject an instance of <code>useSingletonOf</code>.
	
	<p>This will create an instance on the first injection, but will 
	re-use that instance for subsequent injections.</p>
	
	@param whenAskedFor A class or interface
	@param useSingletonOf A class to instantiate
	@param named An optional name (id)
	
	@returns A reference to the rule for this injection. To be used with 
	<code>mapRule</code>]]></haxe_doc>
		</mapSingletonOf>
		<mapSingleton line="120" public="1" set="method">
			<f a="whenAskedFor:?named">
				<c path="Class"><d/></c>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[When asked for an instance of the class <code>whenAskedFor</code> 
	inject an instance of <code>whenAskedFor</code>.
	
	<p>This will create an instance on the first injection, but will 
	re-use that instance for subsequent injections.</p>
	
	@param whenAskedFor A class or interface
	@param named An optional name (id)
	
	@returns A reference to the rule for this injection. To be used with 
	<code>mapRule</code>]]></haxe_doc>
		</mapSingleton>
		<mapClass line="100" public="1" set="method">
			<f a="whenAskedFor:instantiateClass:?named">
				<c path="Class"><d/></c>
				<c path="Class"><d/></c>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[When asked for an instance of the class <code>whenAskedFor</code> 
	inject a new instance of <code>instantiateClass</code>.
	
	<p>This will create a new instance for each injection.</p>
	
	@param whenAskedFor A class or interface
	@param instantiateClass A class to instantiate
	@param named An optional name (id)

	@returns A reference to the rule for this injection. To be used with 
	<code>mapRule</code>]]></haxe_doc>
		</mapClass>
		<mapValue line="80" public="1" set="method">
			<f a="whenAskedFor:useValue:?named">
				<c path="Class"><d/></c>
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[When asked for an instance of the class <code>whenAskedFor</code> 
	inject the instance <code>useValue</code>.
	
	<p>This is used to register an existing instance with the injector 
	and treat it like a Singleton.</p>
	
	@param whenAskedFor A class or interface
	@param useValue An instance
	@param named An optional name (id)
	
	@returns A reference to the rule for this injection. To be used with 
	<code>mapRule</code>]]></haxe_doc>
		</mapValue>
		<injecteeDescriptions><c path="minject.ClassHash"><c path="minject.InjecteeDescription"/></c></injecteeDescriptions>
		<injectionConfigs><c path="Hash"><c path="minject.InjectionConfig"/></c></injectionConfigs>
		<parentInjector public="1" set="set_parentInjector">
			<c path="minject.Injector"/>
			<haxe_doc>The parent of this injector.</haxe_doc>
		</parentInjector>
		<attendedToInjectees public="1" set="null">
			<c path="mcore.data.Dictionary">
				<d/>
				<e path="Bool"/>
			</c>
			<haxe_doc>A dictionary of instances that have already had their dependencies satified 
	by the injector.</haxe_doc>
		</attendedToInjectees>
		<new line="59" public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_doc>The dependency injector.</haxe_doc>
		<meta><m n=":build"><e>'???'</e></m></meta>
	</class><class module="minject.Injector" file="src/minject/Injector.hx" path="minject.ClassHash" params="T">
		<exists line="509" public="1" set="method"><f a="key">
	<c path="Class"><d/></c>
	<e path="Bool"/>
</f></exists>
		<get line="504" public="1" set="method"><f a="key">
	<c path="Class"><d/></c>
	<c path="minject.ClassHash.T"/>
</f></get>
		<set line="499" public="1" set="method"><f a="key:value">
	<c path="Class"><d/></c>
	<c path="minject.ClassHash.T"/>
	<e path="Void"/>
</f></set>
		<hash><c path="Hash"><c path="minject.ClassHash.T"/></c></hash>
		<new line="494" public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class><class module="minject.Injector" file="src/minject/Injector.hx" path="minject.InjecteeDescription" params="">
		<injectionPoints public="1"><c path="Array"><c path="minject.point.InjectionPoint"/></c></injectionPoints>
		<ctor public="1"><c path="minject.point.InjectionPoint"/></ctor>
		<new line="520" public="1" set="method"><f a="ctor:injectionPoints">
	<c path="minject.point.InjectionPoint"/>
	<c path="Array"><c path="minject.point.InjectionPoint"/></c>
	<e path="Void"/>
</f></new>
	</class><class file="src/minject/point/InjectionPoint.hx" path="minject.point.InjectionPoint" params="">
		<initializeInjection line="42" set="method">
			<f a="meta">
				<d/>
				<e path="Void"/>
			</f>
			<meta><m n="IgnoreCover"/></meta>
		</initializeInjection>
		<applyInjection line="36" public="1" set="method">
			<f a="target:injector">
				<d/>
				<c path="minject.Injector"/>
				<d/>
			</f>
			<meta><m n="IgnoreCover"/></meta>
		</applyInjection>
		<new line="30" public="1" set="method"><f a="meta:injector">
	<d/>
	<c path="minject.Injector"/>
	<e path="Void"/>
</f></new>
	</class><class file="src/minject/point/MethodInjectionPoint.hx" path="minject.point.MethodInjectionPoint" params="">
		<extends path="minject.point.InjectionPoint"/>
		<gatherParameterValues line="95" set="method"><f a="target:injector">
	<d/>
	<c path="minject.Injector"/>
	<c path="Array"><d/></c>
</f></gatherParameterValues>
		<gatherParameters line="56" set="method"><f a="meta">
	<d/>
	<e path="Void"/>
</f></gatherParameters>
		<initializeInjection line="50" override="1" set="method"><f a="meta">
	<d/>
	<e path="Void"/>
</f></initializeInjection>
		<applyInjection line="42" override="1" public="1" set="method"><f a="target:injector">
	<d/>
	<c path="minject.Injector"/>
	<d/>
</f></applyInjection>
		<requiredParameters><c path="Int"/></requiredParameters>
		<_parameterInjectionConfigs><c path="Array"><d/></c></_parameterInjectionConfigs>
		<methodName><c path="String"/></methodName>
		<new line="36" public="1" set="method"><f a="meta:?injector">
	<d/>
	<c path="minject.Injector"/>
	<e path="Void"/>
</f></new>
	</class><class file="src/minject/point/ConstructorInjectionPoint.hx" path="minject.point.ConstructorInjectionPoint" params="">
		<extends path="minject.point.MethodInjectionPoint"/>
		<initializeInjection line="41" override="1" set="method"><f a="meta">
	<d/>
	<e path="Void"/>
</f></initializeInjection>
		<applyInjection line="34" override="1" public="1" set="method"><f a="target:injector">
	<d/>
	<c path="minject.Injector"/>
	<d/>
</f></applyInjection>
		<new line="29" public="1" set="method"><f a="meta:forClass:?injector">
	<d/>
	<c path="Class"><d/></c>
	<c path="minject.Injector"/>
	<e path="Void"/>
</f></new>
	</class><class module="minject.point.MethodInjectionPoint" file="src/minject/point/MethodInjectionPoint.hx" path="minject.point.ParameterInjectionConfig" params="">
		<injectionName public="1"><c path="String"/></injectionName>
		<typeName public="1"><c path="String"/></typeName>
		<new line="129" public="1" set="method"><f a="typeName:injectionName">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class><class file="src/minject/point/NoParamsConstructorInjectionPoint.hx" path="minject.point.NoParamsConstructorInjectionPoint" params="">
		<extends path="minject.point.InjectionPoint"/>
		<applyInjection line="35" override="1" public="1" set="method"><f a="target:injector">
	<d/>
	<c path="minject.Injector"/>
	<d/>
</f></applyInjection>
		<new line="30" public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class><class file="src/minject/point/PostConstructInjectionPoint.hx" path="minject.point.PostConstructInjectionPoint" params="">
		<extends path="minject.point.InjectionPoint"/>
		<initializeInjection line="47" override="1" set="method"><f a="meta">
	<d/>
	<e path="Void"/>
</f></initializeInjection>
		<applyInjection line="41" override="1" public="1" set="method"><f a="target:injector">
	<d/>
	<c path="minject.Injector"/>
	<d/>
</f></applyInjection>
		<methodName><c path="String"/></methodName>
		<order public="1" set="null"><c path="Int"/></order>
		<new line="35" public="1" set="method"><f a="meta:?injector">
	<d/>
	<c path="minject.Injector"/>
	<e path="Void"/>
</f></new>
	</class><class file="src/minject/point/PropertyInjectionPoint.hx" path="minject.point.PropertyInjectionPoint" params="">
		<extends path="minject.point.InjectionPoint"/>
		<initializeInjection line="65" override="1" set="method"><f a="meta">
	<d/>
	<e path="Void"/>
</f></initializeInjection>
		<applyInjection line="42" override="1" public="1" set="method"><f a="target:injector">
	<d/>
	<c path="minject.Injector"/>
	<d/>
</f></applyInjection>
		<hasSetter><e path="Bool"/></hasSetter>
		<injectionName><c path="String"/></injectionName>
		<propertyType><c path="String"/></propertyType>
		<propertyName><c path="String"/></propertyName>
		<new line="37" public="1" set="method"><f a="meta:?injector">
	<d/>
	<c path="minject.Injector"/>
	<e path="Void"/>
</f></new>
	</class><class file="src/minject/result/InjectionResult.hx" path="minject.result.InjectionResult" params="">
		<getResponse line="34" public="1" set="method">
			<f a="injector">
				<c path="minject.Injector"/>
				<d/>
			</f>
			<meta><m n="IgnoreCover"/></meta>
		</getResponse>
		<new line="29" public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class><class file="src/minject/result/InjectClassResult.hx" path="minject.result.InjectClassResult" params="">
		<extends path="minject.result.InjectionResult"/>
		<getResponse line="37" override="1" public="1" set="method"><f a="injector">
	<c path="minject.Injector"/>
	<d/>
</f></getResponse>
		<responseType><c path="Class"><d/></c></responseType>
		<new line="31" public="1" set="method"><f a="responseType">
	<c path="Class"><d/></c>
	<e path="Void"/>
</f></new>
	</class><class file="src/minject/result/InjectOtherRuleResult.hx" path="minject.result.InjectOtherRuleResult" params="">
		<extends path="minject.result.InjectionResult"/>
		<getResponse line="38" override="1" public="1" set="method"><f a="injector">
	<c path="minject.Injector"/>
	<d/>
</f></getResponse>
		<rule><c path="minject.InjectionConfig"/></rule>
		<new line="32" public="1" set="method"><f a="rule">
	<c path="minject.InjectionConfig"/>
	<e path="Void"/>
</f></new>
	</class><class file="src/minject/result/InjectSingletonResult.hx" path="minject.result.InjectSingletonResult" params="">
		<extends path="minject.result.InjectionResult"/>
		<createResponse line="48" set="method"><f a="injector">
	<c path="minject.Injector"/>
	<d/>
</f></createResponse>
		<getResponse line="38" override="1" public="1" set="method"><f a="injector">
	<c path="minject.Injector"/>
	<d/>
</f></getResponse>
		<response><d/></response>
		<responseType><c path="Class"><d/></c></responseType>
		<new line="32" public="1" set="method"><f a="responseType">
	<c path="Class"><d/></c>
	<e path="Void"/>
</f></new>
	</class><class file="src/minject/result/InjectValueResult.hx" path="minject.result.InjectValueResult" params="">
		<extends path="minject.result.InjectionResult"/>
		<getResponse line="37" override="1" public="1" set="method"><f a="injector">
	<c path="minject.Injector"/>
	<d/>
</f></getResponse>
		<value><d/></value>
		<new line="31" public="1" set="method"><f a="value">
	<d/>
	<e path="Void"/>
</f></new>
	</class></haxe>