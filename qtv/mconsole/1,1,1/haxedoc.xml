<haxe><class module="mconsole.Printer" file="src/mconsole/Printer.hx" path="mconsole.PrinterBase" params="">
		<printLine line="154" set="method">
			<f a="color:line:pos">
				<e path="mconsole.ConsoleColor"/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Abstract implementation.</haxe_doc>
		</printLine>
		<print line="88" public="1" set="method">
			<f a="level:params:indent:pos">
				<e path="mconsole.LogLevel"/>
				<c path="Array"><d/></c>
				<c path="Int"/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Print an array of values to the console at a LogLevel and indent level.

	@param	level	The level of the message to print
	@param	params	An array of values to print
	@param	indent	The indent level of the message to be printed.
	@param	pos		The position where the message was printed.</haxe_doc>
		</print>
		<lineNumber>
			<c path="String"/>
			<haxe_doc>The previous log's line number.</haxe_doc>
		</lineNumber>
		<position>
			<c path="String"/>
			<haxe_doc>The previous log's position.</haxe_doc>
		</position>
		<printLineNumbers public="1">
			<e path="Bool"/>
			<haxe_doc>When the printing line changes print the line number before the message.</haxe_doc>
		</printLineNumbers>
		<printPosition public="1">
			<e path="Bool"/>
			<haxe_doc>When the printing position changes (position is className.methodName), 
	print the new position before the message.</haxe_doc>
		</printPosition>
		<new line="74" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_doc>A base ConsolePrinter implementation for functionality shared by 
FlashConsolePrinter, HTMLConsolePrinter and CommandLineConsolePrinter.</haxe_doc>
	</class><class file="src/mconsole/Printer.hx" path="mconsole.Printer" params="" interface="1">
		<print public="1" set="method">
			<f a="level:params:indent:pos">
				<e path="mconsole.LogLevel"/>
				<c path="Array"><d/></c>
				<c path="Int"/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Print an array of values to the console at a LogLevel and indent level.

	@param	level	The level of the message to print
	@param	params	An array of values to print
	@param	indent	The indent level of the message to be printed.
	@param	pos		The position where the message was printed.</haxe_doc>
		</print>
		<haxe_doc>A ConsolePrinter is responsible for printing the output of the Console. 
Messages can be printed at different LogLevels and at different 
indentations. Implementations can also define activate/deactivate behavior 
when they are set/unset as the current console printer using 
Console.setPrinter()</haxe_doc>
	</class><class file="src/mconsole/ConsoleView.hx" path="mconsole.ConsoleView" params="">
		<extends path="mconsole.PrinterBase"/>
		<implements path="mconsole.Printer"/>
		<CONSOLE_STYLES line="41" get="inline" set="null" static="1">
			<c path="String"/>
			<haxe_doc>The styles added to the document for the console printer.</haxe_doc>
		</CONSOLE_STYLES>
		<remove line="151" public="1" set="method"><f a=""><e path="Void"/></f></remove>
		<attach line="146" public="1" set="method"><f a=""><e path="Void"/></f></attach>
		<printLine line="125" override="1" set="method">
			<f a="color:line:pos">
				<e path="mconsole.ConsoleColor"/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Prints a single line of coloured output to the log panel. Each line is 
	linked to open the position where it was printed using the sublime URL 
	scheme (mac only).

	https://github.com/hiddenbek/subl-handler</haxe_doc>
		</printLine>
		<updateScroll line="112" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>When output scrolls, evaluate whether output is scrolled to the bottom.</haxe_doc>
		</updateScroll>
		<atBottom>
			<e path="Bool"/>
			<haxe_doc>Is the log output currently scrolled to the bottom. When true new logs will 
	cause the log output window to scroll to display new log entries.</haxe_doc>
		</atBottom>
		<projectHome>
			<c path="String"/>
			<haxe_doc>The projects home directory, determined at compilation time by a macro. 
	Used to determine absolute URLs to log positions, so that clicking on a 
	log can open the correct file (and line, if supported) in a users editor.</haxe_doc>
		</projectHome>
		<element public="1" set="null">
			<t path="js.HtmlDom"/>
			<haxe_doc>The HTML element to print to, created when the printer is constructed and 
	attached to document.body.</haxe_doc>
		</element>
		<new line="80" public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_doc>A Printer that prints formatted logs to an HTML element.</haxe_doc>
	</class><class file="src/mconsole/Console.hx" path="mconsole.Console" params="">
		<defaultPrinter line="68" public="1" static="1">
			<c path="mconsole.ConsoleView"/>
			<haxe_doc>The default console printer.</haxe_doc>
		</defaultPrinter>
		<printers line="76" static="1">
			<c path="Array"><c path="mconsole.Printer"/></c>
			<haxe_doc>The ConsolePrinters to print output to.</haxe_doc>
		</printers>
		<groupDepth line="82" static="1">
			<c path="Int"/>
			<haxe_doc>The current group depth, incremented when group(name) is called, and 
	decremented when groupEnd() is called.</haxe_doc>
		</groupDepth>
		<times line="87" static="1">
			<c path="Hash"><c path="Float"/></c>
			<haxe_doc>A hash of named timestamps.</haxe_doc>
		</times>
		<counts line="92" static="1">
			<c path="Hash"><c path="Int"/></c>
			<haxe_doc>A hash of counters by a unique posInfo identifier.</haxe_doc>
		</counts>
		<previousTrace static="1">
			<d/>
			<haxe_doc>The previous value of haxe.Log.trace if redirectTraces has been called, or 
	null if it has not.</haxe_doc>
		</previousTrace>
		<running line="103" static="1">
			<e path="Bool"/>
			<haxe_doc>Is the console currently active?</haxe_doc>
		</running>
		<start line="144" public="1" set="method" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Starts the console, redirecting haxe.Log.trace and adding a default printer 
	if WebKit is not available.

	The trace method accepts a variable number of arguments which are passed 
	to the console. If the first argument is a string that matches a log level 
	(log, info, warn...) then the trace is logged at that level.</haxe_doc>
		</start>
		<stop line="172" public="1" set="method" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Restores the console to an inactive state.</haxe_doc>
		</stop>
		<addPrinter line="200" public="1" set="method" static="1">
			<f a="printer">
				<c path="mconsole.Printer"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Add a console printer.</haxe_doc>
		</addPrinter>
		<removePrinter line="209" public="1" set="method" static="1">
			<f a="printer">
				<c path="mconsole.Printer"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Remove a console printer.</haxe_doc>
		</removePrinter>
		<haxeTrace line="218" set="method" static="1">
			<f a="value:?pos">
				<d/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>The method called by Haxe trace. Checks if the first parameter matches a 
	log level, and forwards the log to the appropriate handler.</haxe_doc>
		</haxeTrace>
		<print line="242" get="inline" set="null" static="1">
			<f a="level:params:pos">
				<e path="mconsole.LogLevel"/>
				<c path="Array"><d/></c>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Print a message to each of the printers.</haxe_doc>
		</print>
		<log line="250" public="1" get="inline" set="null" static="1">
			<f a="message:?pos">
				<d/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Logs the message.</haxe_doc>
		</log>
		<info line="259" public="1" get="inline" set="null" static="1">
			<f a="message:?pos">
				<d/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Logs the message.</haxe_doc>
		</info>
		<debug line="268" public="1" get="inline" set="null" static="1">
			<f a="message:?pos">
				<d/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Logs the message.</haxe_doc>
		</debug>
		<warn line="277" public="1" get="inline" set="null" static="1">
			<f a="message:?pos">
				<d/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Logs a "warning" icon followed by a color-coded message.</haxe_doc>
		</warn>
		<error line="286" public="1" get="inline" set="null" static="1">
			<f a="message:?pos">
				<d/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Logs an "error" icon followed by a color-coded message.</haxe_doc>
		</error>
		<trace line="309" public="1" get="inline" set="null" static="1">
			<f a="?pos">
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Logs a stack trace at the moment the function is called. The stack trace 
	lists the functions on the call stack (functions that have been called 
	and have not yet finished executing and returned) and the values of any 
	arguments passed to those functions.</haxe_doc>
		</trace>
		<assert line="329" public="1" get="inline" set="null" static="1">
			<f a="expression:message:?pos">
				<e path="Bool"/>
				<d/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>If expression evaluates to false, logs the message.</haxe_doc>
		</assert>
		<count line="345" public="1" get="inline" set="null" static="1">
			<f a="title:?pos">
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Logs the number of times this line of code has executed, and an 
	optional title.</haxe_doc>
		</count>
		<group line="359" public="1" get="inline" set="null" static="1">
			<f a="message:?pos">
				<d/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Logs the message object and begins an indented block for further 
	log entries.</haxe_doc>
		</group>
		<groupEnd line="370" public="1" get="inline" set="null" static="1">
			<f a="?pos">
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Ends an indented block of log entries.</haxe_doc>
		</groupEnd>
		<time line="379" public="1" get="inline" set="null" static="1">
			<f a="name:?pos">
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Starts a timer and gives it a name.</haxe_doc>
		</time>
		<timeEnd line="389" public="1" get="inline" set="null" static="1">
			<f a="name:?pos">
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Logs the time since Console.time(name) was called, and restarts the timer.</haxe_doc>
		</timeEnd>
		<markTimeline line="405" public="1" get="inline" set="null" static="1">
			<f a="label:?pos">
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds a label to the timeline view marking when the point when the method 
	was called.</haxe_doc>
		</markTimeline>
		<profile line="417" public="1" get="inline" set="null" static="1">
			<f a="?title:?pos">
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Begins profiling JavaScript—tracking the number of times each function is 
	called, the time spent in that function, and the time spent in nested 
	groups of functions. If a title is provided, the profile is named.</haxe_doc>
		</profile>
		<profileEnd line="431" public="1" get="inline" set="null" static="1">
			<f a="?title:?pos">
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Ends one or more JavaScript profiles. If a title is provided and a running 
	profile has a matching title, only the current run of that profile is 
	ended. Otherwise, the current run of all profiles is ended.</haxe_doc>
		</profileEnd>
		<enterDebugger line="443" public="1" get="inline" set="null" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Inserts a breakpoint at the calling position.</haxe_doc>
		</enterDebugger>
		<isWebKit line="457" static="1">
			<e path="Bool"/>
			<haxe_doc>Is the WebKit console API available?</haxe_doc>
		</isWebKit>
		<detectWebKit line="463" set="method" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>Detects if the WebKit console API is available, either natively in 
	JavaScript or via ExternalConnection in Flash.</haxe_doc>
		</detectWebKit>
		<callWebKit line="479" get="inline" set="null" static="1">
			<f a="method:params">
				<c path="String"/>
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>Calls a method on the WebKit console API, either directly in JS or via 
	ExternalInterface in Flash running in a WebKit browser.</haxe_doc>
		</callWebKit>
		<toWebKitValues line="494" set="method" static="1">
			<f a="params">
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Convert parameters for console methods into 'native' objects that will print.</haxe_doc>
		</toWebKitValues>
		<toWebKitValue line="503" set="method" static="1">
			<f a="value">
				<d/>
				<d/>
			</f>
			<haxe_doc>Converts a value into the anything that will print nicely in the console.</haxe_doc>
		</toWebKitValue>
		<haxe_doc>This console implementation assumes the availability of the WebKit console. 
We inline calls to the native API rather than simply creating an extern so we 
can add additional console methods (such as enterDebugger). This also means we 
can convert some Haxe structures (XML for example) into something more readable 
in the console.

In flash, we call the WebKit console API through ExternalInterface.</haxe_doc>
	</class><class file="src/mconsole/ConsoleMacro.hx" extern="1" path="mconsole.ConsoleMacro" params="">
		<haxe_doc>A macro helpers for the console package.</haxe_doc>
		<meta>
			<m n="IgnoreCover"/>
			<m n=":macro"/>
		</meta>
	</class><enum file="src/mconsole/LogLevel.hx" path="mconsole.LogLevel" params="">
		<warn><haxe_doc>Logs indicating unexpected but not fatal program behavior.</haxe_doc></warn>
		<log><haxe_doc>A generic log level.</haxe_doc></log>
		<info><haxe_doc>Logs important for following the current state of a program.</haxe_doc></info>
		<error><haxe_doc>Logs indicating a program error.</haxe_doc></error>
		<debug><haxe_doc>Logs important for debugging problems with a program.</haxe_doc></debug>
		<haxe_doc>Log levels are a way for developers to group and filter log messages depending 
on the kind of information being logged.</haxe_doc>
	</enum><enum module="mconsole.Printer" file="src/mconsole/Printer.hx" path="mconsole.ConsoleColor" params="">
		<yellow/>
		<white/>
		<red/>
		<none/>
		<green/>
		<blue/>
		<haxe_doc>An enum defining possible colors for console output.</haxe_doc>
	</enum><class file="src/mconsole/StackHelper.hx" path="mconsole.StackHelper" params="">
		<filters line="32" static="1"><c path="Hash"><e path="Bool"/></c></filters>
		<createFilters line="34" set="method" static="1"><f a=""><c path="Hash"><e path="Bool"/></c></f></createFilters>
		<toString line="41" public="1" set="method" static="1"><f a="stack">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<c path="String"/>
</f></toString>
		<haxe_doc>A utility class for formatting stack traces as strings.</haxe_doc>
	</class><class module="mconsole.StackHelper" file="src/mconsole/StackHelper.hx" path="mconsole.StackItemHelper" params="">
		<toString line="76" public="1" set="method" static="1"><f a="item:?isFirst">
	<e path="haxe.StackItem"/>
	<e path="Bool"/>
	<c path="String"/>
</f></toString>
		<haxe_doc>A utility class for formatting stack items as strings.</haxe_doc>
	</class></haxe>